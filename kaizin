package com.example.myapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.Home
import androidx.compose.material.icons.rounded.Person
import androidx.compose.material.icons.rounded.Search
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import coil.compose.rememberImagePainter
import com.example.myapplication.ui.theme.MyApplicationTheme
import kotlinx.coroutines.launch
import kotlinx.coroutines.flow.*
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import coil.compose.rememberImagePainter
import androidx.compose.foundation.Image
import androidx.compose.ui.draw.clip
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.Query
import com.google.gson.annotations.SerializedName
import retrofit2.Response
import retrofit2.http.Path
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid



class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyApplicationTheme {
                NavigationApp()
            }
        }
    }
}

@Composable
fun NavigationApp() {
    val navController = rememberNavController()
    NavHost(navController = navController, startDestination = "main_screen") {
        composable("main_screen") { SkillCinemaScreen(navController) }
        composable("next_screen") {
            val viewModel: MoviesViewModel = androidx.lifecycle.viewmodel.compose.viewModel()
            NextScreen(viewModel = viewModel, navController = navController)
        }
        composable("all_movies") {
            val viewModel: MoviesViewModel = androidx.lifecycle.viewmodel.compose.viewModel()
            AllMoviesScreen(viewModel = viewModel, navController = navController)
        }
        composable("movie_detail/{filmId}") { backStackEntry ->
            // Извлекаем filmId из аргументов маршрута
            val filmId = backStackEntry.arguments?.getString("filmId")?.toIntOrNull()

            println("Извлеченный filmId из backStackEntry: $filmId")

            if (filmId == null || filmId < 1) {
                // Показываем сообщение об ошибке, если ID фильма некорректен
                Text(
                    text = "Некорректный ID фильма: $filmId",
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    color = Color.Red
                )
            } else {
                // Переходим на экран с деталями фильма
                val viewModel: MoviesViewModel = androidx.lifecycle.viewmodel.compose.viewModel()
                MovieDetailScreen(viewModel = viewModel, filmId = filmId, navController = navController)
            }
        }
    }


}

@Composable
fun SkillCinemaScreen(navController: NavHostController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "SkillCinema",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(top = 16.dp)
        )
        TextButton(onClick = { navController.navigate("next_screen") }) {
            Text(text = "Пропустить", color = Color.Blue)
        }
    }
}

@Composable
fun NextScreen(
    viewModel: MoviesViewModel,
    navController: NavHostController
) {
    val top250MoviesState by viewModel.top250MoviesState.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Row(
            horizontalArrangement = Arrangement.SpaceBetween,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(
                text = "TOP 250",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            Button(onClick = {
                // Переход на экран со всеми фильмами
                navController.navigate("all_movies")
            }) {
                Text(text = "ВСЕ")
            }
        }

        when (val state = top250MoviesState) {
            is ScreenState.Loading -> {
                Text("Загрузка...", modifier = Modifier.padding(16.dp))
            }

            is ScreenState.Success<*> -> {
                val movies = (state.data as List<MovieItem>)
                if (movies.isNotEmpty()) {
                    LazyRow(
                        modifier = Modifier.fillMaxSize(),
                        horizontalArrangement = Arrangement.spacedBy(16.dp),
                        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp)
                    ) {
                        items(movies.take(5)) { movie -> // Отображаем только первые 5 фильмов
                            MovieCard(movie = movie, navController = navController)
                        }
                    }
                } else {
                    Text("Нет доступных фильмов", modifier = Modifier.padding(16.dp))
                }
            }

            is ScreenState.Error -> {
                Text(
                    "Ошибка: ${state.message}",
                    color = Color.Red,
                    modifier = Modifier.padding(16.dp)
                )
            }

            else -> Unit
        }
    }

    LaunchedEffect(Unit) {
        viewModel.fetchTop250Movies()
    }
}


@Composable
fun SectionHeader(title: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 16.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = title,
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold
        )
    }
}

@Composable
fun MovieSection(
    movies: List<MovieItem>,
    navController: NavHostController,
    onMovieClick: (MovieItem) -> Unit
) {
    LazyRow(
        horizontalArrangement = Arrangement.spacedBy(8.dp),
        modifier = Modifier.padding(vertical = 8.dp)
    ) {
        items(movies) { movie ->
            MovieCard(movie = movie,navController = navController)
        }
    }
}

@Composable
fun MovieCard(movie: MovieItem, navController: NavHostController) {
    Column(
        modifier = Modifier
            .padding(16.dp)
            .fillMaxWidth()
            .clickable {

                    navController.navigate("movie_detail/${movie.id}")

            },
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Card(
            modifier = Modifier
                .size(150.dp)
                .clip(RoundedCornerShape(8.dp)),
            shape = RoundedCornerShape(8.dp)
        ) {
            Image(
                painter = rememberImagePainter(
                    data = movie.imageUrl,
                    builder = {
                        crossfade(true)
                    }
                ),
                contentDescription = movie.title,
                modifier = Modifier.fillMaxSize()
            )
        }
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = movie.title,
            fontWeight = FontWeight.Bold,
            fontSize = 16.sp
        )
        Text(
            text = "Жанр: ${movie.genre.joinToString(", ") { it.name }}",
            fontSize = 14.sp,
            color = Color.Gray
        )
        Text(
            text = "Рейтинг: ${movie.rating}",
            fontSize = 14.sp,
            color = Color.Blue
        )
    }
}

@Composable
fun BottomNavigationBar(navController: NavHostController) {
    NavigationBar {
        val items = listOf(
            BottomNavigationItem("Home", "main_screen", Icons.Rounded.Home),
            BottomNavigationItem("Search", "search_screen", Icons.Rounded.Search),
            BottomNavigationItem("Profile", "profile_screen", Icons.Rounded.Person)
        )

        items.forEach { item ->
            NavigationBarItem(
                selected = false,
                onClick = { navController.navigate(item.route) },
                icon = { Icon(imageVector = item.icon, contentDescription = item.title) },
                label = { Text(item.title) }
            )
        }
    }
}

data class BottomNavigationItem(
    val title: String,
    val route: String,
    val icon: ImageVector
)

data class MovieItem(
    @SerializedName("id") val id: Int,
    @SerializedName("nameRu") val title: String,
    @SerializedName("genres") val genre: List<Genre>,
    @SerializedName("posterUrlPreview") val imageUrl: String,
    @SerializedName("ratingKinopoisk") val rating: Double
)

data class Genre(
    @SerializedName("genre") val name: String
)

data class FilmDetailsResponse(
    @SerializedName("nameRu") val title: String,
    @SerializedName("description") val description: String,
    @SerializedName("posterUrl") val imageUrl: String,
    @SerializedName("genres") val genres: List<Genre>,
    @SerializedName("persons") val actors: List<Actor>
)

data class Actor(
    @SerializedName("nameRu") val name: String
)



sealed interface ScreenState {
    object Initial : ScreenState
    object Loading : ScreenState
    data class Success<T>(val data: T) : ScreenState
    data class Error(val message: String) : ScreenState
}

class MoviesViewModel : ViewModel() {
    private val _top250MoviesState = MutableStateFlow<ScreenState>(ScreenState.Initial)
    val top250MoviesState: StateFlow<ScreenState> get() = _top250MoviesState

    private val _filmDetailsState = MutableStateFlow<ScreenState>(ScreenState.Initial)
    val filmDetailsState: StateFlow<ScreenState> get() = _filmDetailsState

    fun fetchTop250Movies() {


        viewModelScope.launch {
            _top250MoviesState.value = ScreenState.Loading
            try {
                val response = KinopoiskApi.retrofitService.getCollections("TOP_250_MOVIES", 1)
                if (response.isSuccessful) {
                    val movies = response.body()?.movies?.take(20) ?: emptyList()
                    movies.forEach { println("Полученный фильм: ID=${it.id}, Title=${it.title}") }
                    println("Полученные фильмы: $movies")
                    _top250MoviesState.value = ScreenState.Success(movies ?: emptyList())
                } else {
                    val errorBody = response.errorBody()?.string()
                    println("Ошибка сервера: ${response.code()} - $errorBody")
                    _top250MoviesState.value = ScreenState.Error("Ошибка сервера: ${response.code()}")
                }
            } catch (e: Exception) {
                _top250MoviesState.value = ScreenState.Error("Ошибка сети: ${e.message}")
            }
        }
    }

    fun fetchFilmDetails(id: Int) {
        viewModelScope.launch {
            _filmDetailsState.value = ScreenState.Loading
            try {
                val response = KinopoiskApi.retrofitService.getFilmDetails(id)
                if (response.isSuccessful) {
                    val filmDetails = response.body()
                    _filmDetailsState.value = ScreenState.Success(filmDetails)
                } else {
                    val errorBody = response.errorBody()?.string()
                    _filmDetailsState.value = ScreenState.Error("Ошибка сервера: ${response.code()} - $errorBody")
                }
            } catch (e: Exception) {
                _filmDetailsState.value = ScreenState.Error("Ошибка сети: ${e.message}")
            }
        }
    }
}

object KinopoiskApi {
    private const val BASE_URL = "https://kinopoiskapiunofficial.tech/api/"

    val retrofitService: KinopoiskApiService by lazy {
        retrofit2.Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(retrofit2.converter.gson.GsonConverterFactory.create())
            .build()
            .create(KinopoiskApiService::class.java)
    }
}

    interface KinopoiskApiService {
        @Headers("X-API-KEY: f6c76308-2036-4a9b-9b6d-c92e4bd0f02c")
        @GET("v2.2/films/collections")
        suspend fun getCollections(
            @Query("type") type: String,
            @Query("page") page: Int
        ): retrofit2.Response<MoviesResponse>

        @Headers("X-API-KEY: f6c76308-2036-4a9b-9b6d-c92e4bd0f02c")
        @GET("v2.2/films/{id}")
        suspend fun getFilmDetails(
            @Path("id") id: Int = 1
        ): Response<FilmDetailsResponse>


    }


data class PremieresResponse(
    @com.google.gson.annotations.SerializedName("items") val movies: List<MovieItem>
)



data class MoviesResponse(
    @SerializedName("items") val movies: List<MovieItem>
)



@Composable
fun MovieDetailScreen(viewModel: MoviesViewModel, filmId: Int, navController: NavHostController) {
    println("Переход на экран деталей фильма с ID: $filmId")

    val filmDetailsState by viewModel.filmDetailsState.collectAsState()

    LaunchedEffect(filmId) {
        viewModel.fetchFilmDetails(filmId)
    }

    when (val state = filmDetailsState) {
        is ScreenState.Loading -> {
            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                CircularProgressIndicator()
            }
        }
        is ScreenState.Success<*> -> {
            val film = state.data as FilmDetailsResponse
            Column(
                modifier = Modifier.fillMaxSize().padding(16.dp)
            ) {
                Text(text = "Назад", Modifier.clickable { navController.popBackStack() })
                Image(
                    painter = rememberImagePainter(film.imageUrl),
                    contentDescription = film.title,
                    modifier = Modifier.fillMaxWidth().height(300.dp)
                )
                Text(text = film.title, fontWeight = FontWeight.Bold, fontSize = 24.sp)
                Text(text = "Описание: ${film.description}")
                Text(text = "Жанры: ${film.genres.joinToString { it.name }}")
                Text(text = "Актеры: ${film.actors.joinToString { it.name }}")
            }
        }
        is ScreenState.Error -> {
            Text(text = "Ошибка: ${state.message}")
        }
        else -> {}
    }
}

@Composable
fun AllMoviesScreen(
    viewModel: MoviesViewModel,
    navController: NavHostController
) {
    val top250MoviesState by viewModel.top250MoviesState.collectAsState()
    val selectedGenres = remember { mutableStateListOf<String>() } // Для фильтрации по жанрам
    val ratingFilter = remember { mutableStateOf(0.0) } // Для фильтрации по рейтингу
    val genres = listOf("Все жанры", "Фэнтези", "Драма", "Экшн", "Комедия") // Пример жанров

    // Фильтруем фильмы
    val filteredMovies = remember(top250MoviesState, selectedGenres, ratingFilter.value) {
        when (val state = top250MoviesState) {
            is ScreenState.Success<*> -> {
                val movies = state.data as List<MovieItem>
                // Фильтрация по жанру
                val genreFiltered = if (selectedGenres.isNotEmpty() && selectedGenres.contains("Все жанры").not()) {
                    movies.filter { movie -> movie.genre.any { selectedGenres.contains(it.name) } }
                } else {
                    movies
                }
                // Фильтрация по рейтингу
                genreFiltered.filter { movie -> movie.rating >= ratingFilter.value }
            }
            else -> emptyList() // Если нет фильмов
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "Все фильмы",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        // Фильтр по жанрам
        Text("Выберите жанр:", fontSize = 16.sp)
        genres.forEach { genre ->
            Row(verticalAlignment = Alignment.CenterVertically) {
                Checkbox(
                    checked = selectedGenres.contains(genre),
                    onCheckedChange = { isChecked ->
                        if (isChecked) {
                            selectedGenres.add(genre)
                        } else {
                            selectedGenres.remove(genre)
                        }
                    }
                )
                Text(text = genre)
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Фильтр по рейтингу
        Text("Выберите минимальный рейтинг:", fontSize = 16.sp)
        Slider(
            value = ratingFilter.value.toFloat(),
            onValueChange = { ratingFilter.value = it.toDouble() },
            valueRange = 0f..10f,
            steps = 9,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Отображение фильтрованных фильмов
        when (val state = top250MoviesState) {
            is ScreenState.Loading -> {
                Text("Загрузка...", modifier = Modifier.padding(16.dp))
            }
            is ScreenState.Success<*> -> {
                val movies = filteredMovies
                if (movies.isNotEmpty()) {
                    LazyColumn(
                        modifier = Modifier.fillMaxSize(),
                        contentPadding = PaddingValues(8.dp)
                    ) {
                        items(movies) { movie ->
                            MovieCard(movie = movie, navController = navController)
                        }
                    }
                } else {
                    Text("Нет доступных фильмов", modifier = Modifier.padding(16.dp))
                }
            }
            is ScreenState.Error -> {
                Text("Ошибка: ${state.message}", color = Color.Red, modifier = Modifier.padding(16.dp))
            }
            else -> Unit
        }
    }

    LaunchedEffect(Unit) {
        viewModel.fetchTop250Movies()
    }
}
